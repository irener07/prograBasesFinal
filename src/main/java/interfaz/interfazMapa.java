/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import Conexiones.Procedimientos;
import Maps.*;
import Conexiones.*;
import com.google.maps.errors.ApiException;
import com.opencsv.CSVReader;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Milagro
 */
public class interfazMapa extends javax.swing.JFrame {

    SwingBrowser browser = new SwingBrowser();
    static ResultSet res;
    String idreserva;
    int cont;
    String idrecorrido;
    java.sql.Date fechaE;
    public static final String SEPARADOR = ",";
    public static String nombreArchivo;
    public static double puntoALat;
    public static double puntoALong;
    public static double puntoBLat;
    public static double puntoBLong;

    /**
     * Creates new form interfazMapa
     */
    public interfazMapa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelMapa = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idReserva = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelMapaLayout = new javax.swing.GroupLayout(panelMapa);
        panelMapa.setLayout(panelMapaLayout);
        panelMapaLayout.setHorizontalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelMapaLayout.setVerticalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Recorrido del Vehículo");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel2.setText("ID de Reserva:");

        idReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idReservaActionPerformed(evt);
            }
        });

        jButton1.setText("Cargar Nuevo Recorrido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ver Recorrido Anterior");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 236, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(301, 301, 301))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(52, 52, 52)
                        .addComponent(jButton1)
                        .addGap(261, 261, 261))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(idReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(panelMapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idReservaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idReservaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (idReserva.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el ID de la Reserva", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            idreserva = idReserva.getText();
            res = Conexiones.Conexion.consulta("Select COUNT(idReserva) from esquema.Reserva where idReserva='" + Integer.parseInt(idreserva) + "'");
            try {
                while (res.next()) {
                    cont = res.getInt(1);

                }
            } catch (SQLException ex) {
                Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (cont >= 0) {
                try {
                    res = Conexion.consulta("Select * from esquema.Reserva where idReserva='" + Integer.parseInt(idreserva) + "'");
                    
                    while (res.next()) {
                        idrecorrido = Integer.toString(res.getInt(10));
                        
                        if (idrecorrido == null) {
                            JOptionPane.showMessageDialog(this, "No se ha podido verificar el recorrido de la reserva", "ERROR", JOptionPane.ERROR_MESSAGE);
                        } else {
                            panelMapa.repaint();
                            JFileChooser elegida = new JFileChooser();
                            FileNameExtensionFilter fil = new FileNameExtensionFilter("CSV", "csv");
                            elegida.setFileFilter(fil);
                            elegida.showOpenDialog(null);
                            File f = elegida.getSelectedFile();
                            CSVReader csvReader = null;
                            
                            try {
                                csvReader = new CSVReader(new FileReader(f), ',', '\n', 0);
                                
                                List<String[]> rows = new ArrayList<>();
                                rows = csvReader.readAll();
                                String coor = "";
                                
                                for (String[] row : rows) {
                                    coor = coor + "+" + (Arrays.toString(row));
                                }
                                
                                coor = coor.replace("+", "").replace("[", "").replace("]", ",");
                                String[] parts = coor.split(",");
                                
                                if (parts.length < 5) {
                                    nombreArchivo = f.getName();
                                    nombreArchivo = nombreArchivo.replaceAll(".csv", "");
                                    System.out.println("-" + nombreArchivo);
                                    //  SimpleDateFormat fecha = new SimpleDateFormat("yyyy/MM/dd");
                                    //    fechaE = (Date) fecha.parse(nombreArchivo);
                                    //        fechaE = new java.sql.Date(date.get());
                                    //  System.out.println(fechaE.getDate());
                                    puntoALat = Double.parseDouble(parts[0].replace(" ", ""));
                                    puntoALong = Double.parseDouble(parts[1].replace(" ", ""));
                                    puntoBLat = Double.parseDouble(parts[2].replace(" ", ""));
                                    puntoBLong = Double.parseDouble(parts[3].replace(" ", ""));
                                    
                                    String ALat = (parts[0].replace(" ", ""));
                                    String ALong = (parts[1].replace(" ", ""));
                                    String BLat = (parts[2].replace(" ", ""));
                                    String BLong = (parts[3].replace(" ", ""));
                                    
                                    try {
                                        Maps.routeMap(puntoALat, puntoALong, puntoBLat, puntoBLong);
                                    } catch (ApiException | InterruptedException | URISyntaxException ex) {
                                        Logger.getLogger(interfazReservaCompleta.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    try {
                                        browser.loadURL(Maps.routeMap(puntoALat, puntoALong, puntoBLat, puntoBLong));
                                    } catch (ApiException | InterruptedException | URISyntaxException ex) {
                                        Logger.getLogger(interfazReservaCompleta.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    browser.setBounds(1, 1, panelMapa.getWidth(), panelMapa.getHeight());
                                    panelMapa.add(browser);
                                    try {
                                        System.out.println(ALat + "\n" + ALong + "\n" + BLat + "\n" + BLong + "\n");
                                        Procedimientos.ingresarRecorrido(ALat, ALong, BLat, BLong);
                                    } catch (SQLException | ParseException ex) {
                                        Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    
                                    res = Conexion.consulta("select IDENT_CURRENT('esquema.Recorrido')");
                                    while (res.next()) {
                                        idrecorrido = Integer.toString(res.getInt(1));
                                    }
                                    
                                    PreparedStatement pps = Conexion.getConexion().prepareStatement("update esquema.Reserva set idRecorrido='" + idrecorrido + "' where idReserva ='" + idReserva.getText() + "'");
                                    pps.executeUpdate();
                                    JOptionPane.showMessageDialog(null, "Los datos ha sido modificados");
                                    
                                } else {
                                    JOptionPane.showMessageDialog(this, "No se ha cargado el archivo CSV", "ERROR", JOptionPane.ERROR_MESSAGE);
                                }
                                
                            } catch (HeadlessException | IOException | NumberFormatException ee) {
                            } catch (SQLException ex) {
                                Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                try {
                                    //closing the reader
                                    csvReader.close();
                                } catch (Exception ee) {
                                    ee.printStackTrace();
                                }
                            }
                        }}
                } catch (SQLException ex) {
                    Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
                }
}}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (idReserva.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el ID de la Reserva", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            idreserva = idReserva.getText();
            res = Conexiones.Conexion.consulta("Select COUNT(idReserva) from esquema.Reserva where idReserva='" + Integer.parseInt(idreserva) + "'");
            try {
                while (res.next()) {
                    cont = res.getInt(1);

                }
            } catch (SQLException ex) {
                Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (cont >= 0) {
                res = Conexion.consulta("Select * from esquema.Reserva where idReserva='" + Integer.parseInt(idreserva) + "'");
                try {
                    while (res.next()) {
                        idrecorrido = res.getString(10);
                    }
                    if (idrecorrido == null) {
                        JOptionPane.showMessageDialog(this, "No se ha podido verificar el recorrido de la reserva", "ERROR", JOptionPane.ERROR_MESSAGE);
                    } else {
                        panelMapa.repaint();
                        res = Conexion.consulta("Select * from esquema.Recorrido where idRecorrido='" + Integer.parseInt(idreserva) + "'");

                        while (res.next()) {
                            puntoALat = Double.parseDouble(res.getString(2));
                            puntoALong = Double.parseDouble(res.getString(3));
                            puntoBLat = Double.parseDouble(res.getString(4));
                            puntoBLong = Double.parseDouble(res.getString(5));
                        }

                        try {
                            Maps.routeMap(puntoALat, puntoALong, puntoBLat, puntoBLong);
                        } catch (ApiException | InterruptedException | IOException | URISyntaxException ex) {
                            Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            browser.loadURL(Maps.routeMap(puntoALat, puntoALong, puntoBLat, puntoBLong));
                        } catch (ApiException | InterruptedException | IOException | URISyntaxException ex) {
                            Logger.getLogger(interfazMapa.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        browser.setBounds(1, 1, panelMapa.getWidth(), panelMapa.getHeight());
                        panelMapa.add(browser);
                    }
                } catch (SQLException e) {
                    System.out.println(e);
                }

            } else {
                JOptionPane.showMessageDialog(this, "No se ha podido verificar la reserva", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField idReserva;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelMapa;
    // End of variables declaration//GEN-END:variables
}
